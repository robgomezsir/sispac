import { getSupabaseAdmin, ok, fail } from './_utils.js'
import { isValidTokenFormat, isTokenNotExpired, logTokenAction } from './token-utils.js'

export default async function handler(req, res){
  try{
    console.log('üîê [validate-token] Valida√ß√£o de token iniciada')
    console.log('üîê [validate-token] Headers:', req.headers)
    
    // Validar m√©todo HTTP
    if (req.method !== 'POST') {
      console.log('‚ùå [validate-token] M√©todo n√£o permitido:', req.method)
      return res.status(405).json({ 
        error: 'M√©todo n√£o permitido',
        message: 'Apenas requisi√ß√µes POST s√£o aceitas'
      })
    }
    
    const { token } = req.body || {}
    
    // Valida√ß√£o do token
    if(!token || !token.trim()) {
      console.log('‚ùå [validate-token] Token n√£o fornecido')
      logTokenAction('VALIDATION_FAILED', null, { reason: 'Token n√£o fornecido' })
      return fail(res, { message: 'Token √© obrigat√≥rio' }, 400)
    }
    
    const cleanToken = token.trim()
    
    // Validar formato do token
    if(!isValidTokenFormat(cleanToken)) {
      console.log('‚ùå [validate-token] Formato de token inv√°lido:', cleanToken)
      logTokenAction('VALIDATION_FAILED', cleanToken, { reason: 'Formato inv√°lido' })
      return fail(res, { message: 'Formato de token inv√°lido' }, 400)
    }
    
    // Verificar se token n√£o expirou
    if(!isTokenNotExpired(cleanToken)) {
      console.log('‚ùå [validate-token] Token expirado:', cleanToken)
      logTokenAction('VALIDATION_FAILED', cleanToken, { reason: 'Token expirado' })
      return fail(res, { message: 'Token expirado' }, 401)
    }
    
    const supabase = getSupabaseAdmin()
    console.log('‚úÖ [validate-token] Cliente Supabase criado')
    
    // Buscar candidato pelo token
    const { data: candidate, error: searchError } = await supabase
      .from('candidates')
      .select('id, name, email, gupy_candidate_id, status, access_token, token_created_at, created_at')
      .eq('access_token', cleanToken)
      .single()
    
    if(searchError) {
      if(searchError.code === 'PGRST116') {
        console.log('‚ùå [validate-token] Token n√£o encontrado:', cleanToken)
        logTokenAction('VALIDATION_FAILED', cleanToken, { reason: 'Token n√£o encontrado no banco' })
        return fail(res, { message: 'Token inv√°lido ou n√£o encontrado' }, 404)
      }
      console.error('‚ùå [validate-token] Erro ao buscar candidato:', searchError)
      return fail(res, { message: 'Erro ao validar token' }, 500)
    }
    
    // Verificar se o candidato j√° completou o teste
    if(candidate.status && candidate.status !== 'PENDENTE_TESTE') {
      console.log('‚ö†Ô∏è [validate-token] Candidato j√° completou o teste:', candidate.id)
      logTokenAction('VALIDATION_FAILED', cleanToken, { 
        reason: 'Teste j√° completado', 
        candidate_id: candidate.id,
        status: candidate.status 
      })
      return fail(res, { 
        message: 'Este teste j√° foi completado',
        candidate_status: candidate.status 
      }, 409)
    }
    
    // Verificar se o token n√£o √© muito antigo (24 horas)
    const tokenCreatedAt = new Date(candidate.token_created_at || candidate.created_at)
    const now = new Date()
    const hoursDiff = (now - tokenCreatedAt) / (1000 * 60 * 60)
    
    if(hoursDiff > 24) {
      console.log('‚ùå [validate-token] Token muito antigo:', cleanToken, 'horas:', hoursDiff)
      logTokenAction('VALIDATION_FAILED', cleanToken, { 
        reason: 'Token muito antigo', 
        candidate_id: candidate.id,
        hours_old: hoursDiff 
      })
      return fail(res, { message: 'Token expirado. Solicite um novo link.' }, 401)
    }
    
    console.log('‚úÖ [validate-token] Token v√°lido:', candidate.id)
    logTokenAction('VALIDATION_SUCCESS', cleanToken, { 
      candidate_id: candidate.id,
      candidate_email: candidate.email,
      hours_old: hoursDiff 
    })
    
    return ok(res, {
      valid: true,
      message: 'Token v√°lido',
      candidate: {
        id: candidate.id,
        name: candidate.name,
        email: candidate.email,
        gupy_candidate_id: candidate.gupy_candidate_id,
        status: candidate.status
      },
      token_info: {
        created_at: candidate.token_created_at || candidate.created_at,
        hours_old: Math.round(hoursDiff * 100) / 100,
        expires_in_hours: Math.max(0, 24 - hoursDiff)
      }
    })
    
  }catch(e){ 
    console.error('‚ùå [validate-token] Erro na valida√ß√£o:', e)
    fail(res, e) 
  }
}
