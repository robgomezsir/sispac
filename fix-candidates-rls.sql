-- CORRIGIR POLÍTICAS RLS DA TABELA CANDIDATES
-- Execute no SQL Editor do Supabase

-- ========================================
-- PARTE 1: VERIFICAR ESTRUTURA ATUAL
-- ========================================

-- Verificar se a tabela candidates existe
SELECT 
    table_name, 
    table_schema,
    table_type
FROM information_schema.tables 
WHERE table_name = 'candidates' 
AND table_schema = 'public';

-- Verificar políticas RLS existentes
SELECT 
    schemaname, 
    tablename, 
    policyname, 
    permissive, 
    roles, 
    cmd,
    qual
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename = 'candidates'
ORDER BY policyname;

-- ========================================
-- PARTE 2: CRIAR TABELA CANDIDATES (se não existir)
-- ========================================

-- Criar tabela candidates se não existir
CREATE TABLE IF NOT EXISTS public.candidates (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    answers JSONB NOT NULL,
    score INTEGER NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Criar índice único para nome+email
CREATE UNIQUE INDEX IF NOT EXISTS uq_candidates_name_email
    ON public.candidates (name, email);

-- ========================================
-- PARTE 3: CRIAR TABELA RESULTS (se não existir)
-- ========================================

-- Criar tabela results se não existir
CREATE TABLE IF NOT EXISTS public.results (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    candidate_id BIGINT REFERENCES public.candidates(id) ON DELETE CASCADE,
    details TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- PARTE 4: HABILITAR RLS
-- ========================================

-- Habilitar RLS nas tabelas
ALTER TABLE public.candidates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.results ENABLE ROW LEVEL SECURITY;

-- ========================================
-- PARTE 5: REMOVER POLÍTICAS PROBLEMÁTICAS
-- ========================================

-- Remover políticas existentes que podem estar causando conflito
DROP POLICY IF EXISTS "insert_candidates" ON public.candidates;
DROP POLICY IF EXISTS "select_candidates" ON public.candidates;
DROP POLICY IF EXISTS "update_candidates" ON public.candidates;
DROP POLICY IF EXISTS "delete_candidates" ON public.candidates;

DROP POLICY IF EXISTS "insert_results" ON public.results;
DROP POLICY IF EXISTS "select_results" ON public.results;
DROP POLICY IF EXISTS "update_results" ON public.results;
DROP POLICY IF EXISTS "delete_results" ON public.results;

-- ========================================
-- PARTE 6: CRIAR POLÍTICAS CORRETAS
-- ========================================

-- Políticas para candidatos
-- Permitir inserção para usuários anônimos (formulário público)
CREATE POLICY "insert_candidates" ON public.candidates
    FOR INSERT TO anon
    WITH CHECK (TRUE);

-- Permitir inserção para usuários autenticados
CREATE POLICY "insert_candidates_auth" ON public.candidates
    FOR INSERT TO authenticated
    WITH CHECK (TRUE);

-- Permitir visualização para usuários autenticados
CREATE POLICY "select_candidates" ON public.candidates
    FOR SELECT TO authenticated
    USING (TRUE);

-- Permitir atualização para usuários autenticados
CREATE POLICY "update_candidates" ON public.candidates
    FOR UPDATE TO authenticated
    USING (TRUE);

-- Políticas para resultados
-- Permitir inserção para usuários anônimos
CREATE POLICY "insert_results" ON public.results
    FOR INSERT TO anon
    WITH CHECK (TRUE);

-- Permitir inserção para usuários autenticados
CREATE POLICY "insert_results_auth" ON public.results
    FOR INSERT TO authenticated
    WITH CHECK (TRUE);

-- Permitir visualização para usuários autenticados
CREATE POLICY "select_results" ON public.results
    FOR SELECT TO authenticated
    USING (TRUE);

-- Permitir atualização para usuários autenticados
CREATE POLICY "update_results" ON public.results
    FOR UPDATE TO authenticated
    USING (TRUE);

-- ========================================
-- PARTE 7: VERIFICAÇÃO
-- ========================================

-- Verificar se as tabelas foram criadas
SELECT 
    table_name, 
    table_schema,
    table_type
FROM information_schema.tables 
WHERE table_name IN ('candidates', 'results')
AND table_schema = 'public'
ORDER BY table_name;

-- Verificar se as políticas foram criadas
SELECT 
    schemaname, 
    tablename, 
    policyname, 
    permissive, 
    roles, 
    cmd
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename IN ('candidates', 'results')
ORDER BY tablename, policyname;

-- Verificar se RLS está habilitado
SELECT 
    schemaname,
    tablename,
    rowsecurity
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('candidates', 'results')
ORDER BY tablename;

-- ========================================
-- PARTE 8: TESTE DE FUNCIONALIDADE
-- ========================================

-- Testar inserção de candidato (simulação)
-- Este comando deve funcionar sem erro
INSERT INTO public.candidates (name, email, answers, score, status) VALUES
    ('Teste RLS', 'teste@teste.com', '{"q1": ["A"]}', 85, 'ACIMA DA EXPECTATIVA')
ON CONFLICT (name, email) DO NOTHING;

-- Verificar se foi inserido
SELECT 
    id,
    name,
    email,
    score,
    status,
    created_at
FROM public.candidates 
WHERE email = 'teste@teste.com';

-- Limpar teste
DELETE FROM public.candidates WHERE email = 'teste@teste.com';

-- ========================================
-- PARTE 9: VERIFICAÇÃO FINAL
-- ========================================

-- Contagem total de candidatos
SELECT 
    'Total candidates' as description,
    COUNT(*) as count
FROM public.candidates;

-- Contagem total de resultados
SELECT 
    'Total results' as description,
    COUNT(*) as count
FROM public.results;
