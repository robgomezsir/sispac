// Script para criar usu√°rio de teste no Supabase
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://zibuyabpsvgulvigvdtb.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InppYnV5YWJwc3ZndWx2aWd2ZHRiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjE3NDc2NSwiZXhwIjoyMDcxNzUwNzY1fQ.PzB6anXBL41uxSGg9GppVhoZGMVRvBqtWYfSVzGOBXQ'

const supabase = createClient(supabaseUrl, supabaseKey)

async function createTestUser() {
  console.log('üîç Verificando usu√°rios existentes...')
  
  try {
    // Listar usu√°rios existentes
    const { data: users, error: listError } = await supabase.auth.admin.listUsers()
    
    if (listError) {
      console.error('‚ùå Erro ao listar usu√°rios:', listError)
      return
    }
    
    console.log(`üìä Total de usu√°rios encontrados: ${users.users.length}`)
    
    // Verificar se admin@sispac.com j√° existe
    const adminUser = users.users.find(user => user.email === 'admin@sispac.com')
    
    if (adminUser) {
      console.log('‚úÖ Usu√°rio admin@sispac.com j√° existe')
      console.log('ID:', adminUser.id)
      console.log('Email:', adminUser.email)
      console.log('Criado em:', adminUser.created_at)
      console.log('√öltimo login:', adminUser.last_sign_in_at)
    } else {
      console.log('‚ùå Usu√°rio admin@sispac.com n√£o encontrado')
      console.log('üîß Criando usu√°rio de teste...')
      
      // Criar usu√°rio de teste
      const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
        email: 'admin@sispac.com',
        password: 'senha123',
        email_confirm: true,
        user_metadata: {
          name: 'Administrador',
          role: 'admin'
        }
      })
      
      if (createError) {
        console.error('‚ùå Erro ao criar usu√°rio:', createError)
        return
      }
      
      console.log('‚úÖ Usu√°rio criado com sucesso!')
      console.log('ID:', newUser.user.id)
      console.log('Email:', newUser.user.email)
    }
    
    // Verificar se h√° candidatos de teste
    console.log('\nüîç Verificando candidatos de teste...')
    
    const { data: candidates, error: candidatesError } = await supabase
      .from('candidates')
      .select('*')
      .limit(5)
    
    if (candidatesError) {
      console.error('‚ùå Erro ao buscar candidatos:', candidatesError)
    } else {
      console.log(`üìä Total de candidatos encontrados: ${candidates.length}`)
      
      if (candidates.length === 0) {
        console.log('‚ö†Ô∏è Nenhum candidato encontrado. Criando candidatos de teste...')
        
        // Criar candidatos de teste
        const testCandidates = [
          {
            name: 'Jo√£o Silva',
            email: 'joao.silva@teste.com',
            score: 85,
            status: 'SUPEROU A EXPECTATIVA',
            behavioral_profile: {
              perfil: 'L√≠der natural com forte capacidade de comunica√ß√£o',
              comportamento: 'Demonstra iniciativa e proatividade em situa√ß√µes desafiadoras',
              competencias: 'Excelente em trabalho em equipe e resolu√ß√£o de problemas',
              lideranca: 'Capaz de motivar e guiar equipes para alcan√ßar objetivos',
              areas_desenvolvimento: ['Gest√£o de tempo', 'Tomada de decis√£o sob press√£o'],
              recomendacoes: 'Ideal para posi√ß√µes de lideran√ßa e gest√£o'
            },
            answers: {
              question_1: ['A', 'B'],
              question_2: ['C'],
              question_3: ['A', 'D']
            }
          },
          {
            name: 'Maria Santos',
            email: 'maria.santos@teste.com',
            score: 72,
            status: 'ACIMA DA EXPECTATIVA',
            behavioral_profile: {
              perfil: 'Profissional dedicada com foco em resultados',
              comportamento: 'Met√≥dica e organizada, sempre cumpre prazos',
              competencias: 'Forte em an√°lise de dados e planejamento',
              lideranca: 'Lidera pelo exemplo e conhecimento t√©cnico',
              areas_desenvolvimento: ['Comunica√ß√£o interpessoal', 'Flexibilidade'],
              recomendacoes: 'Excelente para posi√ß√µes t√©cnicas e anal√≠ticas'
            },
            answers: {
              question_1: ['B', 'C'],
              question_2: ['A'],
              question_3: ['B', 'C']
            }
          },
          {
            name: 'Pedro Oliveira',
            email: 'pedro.oliveira@teste.com',
            score: 65,
            status: 'DENTRO DA EXPECTATIVA',
            behavioral_profile: {
              perfil: 'Profissional equilibrado com potencial de crescimento',
              comportamento: 'Consistente e confi√°vel em suas responsabilidades',
              competencias: 'Boa base t√©cnica e capacidade de aprendizado',
              lideranca: 'Ainda em desenvolvimento, mas mostra interesse',
              areas_desenvolvimento: ['Lideran√ßa', 'Iniciativa', 'Comunica√ß√£o'],
              recomendacoes: 'Adequado para posi√ß√µes j√∫nior com potencial de crescimento'
            },
            answers: {
              question_1: ['C'],
              question_2: ['B'],
              question_3: ['A']
            }
          }
        ]
        
        const { data: insertedCandidates, error: insertError } = await supabase
          .from('candidates')
          .insert(testCandidates)
        
        if (insertError) {
          console.error('‚ùå Erro ao inserir candidatos:', insertError)
        } else {
          console.log('‚úÖ Candidatos de teste criados com sucesso!')
        }
      } else {
        console.log('‚úÖ Candidatos j√° existem no banco')
        candidates.forEach((candidate, index) => {
          console.log(`${index + 1}. ${candidate.name} - ${candidate.email} - Score: ${candidate.score}`)
        })
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

createTestUser()
