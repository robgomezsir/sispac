-- Script COMPLETO para configurar o Supabase e criar usuário ADMIN
-- Execute este script no SQL Editor do Supabase

-- ========================================
-- 1. VERIFICAR ESTRUTURA EXISTENTE
-- ========================================

-- Verificar se auth.users existe
SELECT EXISTS (
  SELECT FROM information_schema.tables 
  WHERE table_schema = 'auth' 
  AND table_name = 'users'
) as auth_users_exists;

-- Verificar tabelas existentes
SELECT table_name, table_schema 
FROM information_schema.tables 
WHERE table_schema IN ('public', 'auth')
ORDER BY table_schema, table_name;

-- ========================================
-- 2. CRIAR TABELAS NECESSÁRIAS
-- ========================================

-- Tabela de candidatos (se não existir)
CREATE TABLE IF NOT EXISTS public.candidates (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  answers JSONB NOT NULL,
  score INTEGER NOT NULL,
  status TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de resultados detalhados (se não existir)
CREATE TABLE IF NOT EXISTS public.results (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  candidate_id BIGINT REFERENCES public.candidates(id) ON DELETE CASCADE,
  details TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Tabela de perfis de usuários (se não existir)
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email TEXT NOT NULL,
  role TEXT NOT NULL DEFAULT 'rh' CHECK (role IN ('admin', 'rh')),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ========================================
-- 3. CONFIGURAR ROW LEVEL SECURITY (RLS)
-- ========================================

-- Habilitar RLS nas tabelas
ALTER TABLE public.candidates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Políticas para candidatos
DROP POLICY IF EXISTS "insert_candidates" ON public.candidates;
CREATE POLICY "insert_candidates" ON public.candidates
  FOR INSERT TO anon
  WITH CHECK (TRUE);

DROP POLICY IF EXISTS "select_candidates" ON public.candidates;
CREATE POLICY "select_candidates" ON public.candidates
  FOR SELECT TO authenticated
  USING (TRUE);

-- Políticas para resultados
DROP POLICY IF EXISTS "insert_results" ON public.results;
CREATE POLICY "insert_results" ON public.results
  FOR INSERT TO anon
  WITH CHECK (TRUE);

DROP POLICY IF EXISTS "select_results" ON public.results;
CREATE POLICY "select_results" ON public.results
  FOR SELECT TO authenticated
  USING (TRUE);

-- Políticas para profiles
DROP POLICY IF EXISTS "Users can view own profile" ON public.profiles;
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update own profile" ON public.profiles;
CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

-- ========================================
-- 4. INSERIR DADOS DE TESTE
-- ========================================

-- Inserir candidatos de teste (se não existirem)
INSERT INTO public.candidates (name, email, answers, score, status) VALUES
  ('João Silva', 'joao@teste.com', '{"q1": "A", "q2": "B"}', 85, 'Aprovado'),
  ('Maria Santos', 'maria@teste.com', '{"q1": "C", "q2": "A"}', 92, 'Aprovado'),
  ('Pedro Costa', 'pedro@teste.com', '{"q1": "B", "q2": "C"}', 78, 'Em Análise')
ON CONFLICT (name, email) DO NOTHING;

-- ========================================
-- 5. VERIFICAR CONFIGURAÇÃO
-- ========================================

-- Verificar tabelas criadas
SELECT table_name, table_schema 
FROM information_schema.tables 
WHERE table_schema = 'public'
ORDER BY table_name;

-- Verificar políticas RLS
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual
FROM pg_policies
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- Verificar dados de teste
SELECT 'candidates' as table_name, COUNT(*) as count FROM public.candidates
UNION ALL
SELECT 'results' as table_name, COUNT(*) as count FROM public.results
UNION ALL
SELECT 'profiles' as table_name, COUNT(*) as count FROM public.profiles;

-- ========================================
-- 6. INSTRUÇÕES PARA CRIAR USUÁRIO
-- ========================================

-- IMPORTANTE: Execute manualmente no painel do Supabase:
-- 1. Vá para Authentication > Users
-- 2. Clique em "Add User"
-- 3. Preencha:
--    - Email: robgomez.sir@gmail.com
--    - Password: admin1641
--    - Email Confirm: true
-- 4. Clique em "Create User"

-- Após criar o usuário, execute este comando para criar o perfil:
INSERT INTO public.profiles (id, email, role, created_at)
VALUES (
  (SELECT id FROM auth.users WHERE email = 'robgomez.sir@gmail.com'),
  'robgomez.sir@gmail.com',
  'admin',
  NOW()
)
ON CONFLICT (id) DO UPDATE SET
  role = EXCLUDED.role,
  updated_at = NOW();

-- Verificar se o perfil foi criado
SELECT p.*, u.email_confirmed_at 
FROM public.profiles p
JOIN auth.users u ON p.id = u.id
WHERE p.email = 'robgomez.sir@gmail.com';
