-- Tabela de candidatos
CREATE TABLE IF NOT EXISTS public.candidates (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  answers JSONB NOT NULL,
  score INTEGER NOT NULL,
  status TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Garantir unicidade nome+email
CREATE UNIQUE INDEX IF NOT EXISTS uq_candidates_name_email
  ON public.candidates (name, email);

-- Tabela de resultados detalhados
CREATE TABLE IF NOT EXISTS public.results (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  candidate_id BIGINT REFERENCES public.candidates(id) ON DELETE CASCADE,
  details TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Habilitar Row‑Level Security nas tabelas
ALTER TABLE public.candidates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.results   ENABLE ROW LEVEL SECURITY;

-- Políticas de candidatos
DROP POLICY IF EXISTS insert_candidates ON public.candidates;
CREATE POLICY "insert_candidates" ON public.candidates
  FOR INSERT TO anon          -- usuários não autenticados (formulário público)
  WITH CHECK (TRUE);

DROP POLICY IF EXISTS select_candidates ON public.candidates;
CREATE POLICY "select_candidates" ON public.candidates
  FOR SELECT TO authenticated
  USING (TRUE);

-- Políticas de resultados
DROP POLICY IF EXISTS insert_results ON public.results;
CREATE POLICY "insert_results" ON public.results
  FOR INSERT TO anon
  WITH CHECK (TRUE);

DROP POLICY IF EXISTS select_results ON public.results;
CREATE POLICY "select_results" ON public.results
  FOR SELECT TO authenticated
  USING (TRUE);