// Script de teste automatizado para o Dashboard SisPAC
// Execute com: node test_dashboard.js

import { chromium } from 'playwright';

const BASE_URL = 'http://localhost:5173';
const TEST_EMAIL = 'admin@sispac.com';
const TEST_PASSWORD = 'senha123';

async function testDashboard() {
  console.log('üöÄ Iniciando testes do Dashboard SisPAC...\n');
  
  const browser = await chromium.launch({ 
    headless: false, // Mostrar navegador para debug
    slowMo: 1000 // Delay entre a√ß√µes para visualizar
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();
  
  try {
    // Teste 1: Acesso sem autentica√ß√£o
    console.log('üìã Teste 1: Acesso sem autentica√ß√£o');
    await page.goto(`${BASE_URL}/dashboard`);
    await page.waitForTimeout(2000);
    
    const currentUrl = page.url();
    if (currentUrl.includes('/dashboard')) {
      console.log('‚ùå FALHA: Dashboard acess√≠vel sem autentica√ß√£o');
    } else {
      console.log('‚úÖ SUCESSO: Redirecionamento para login funcionando');
    }
    
    // Teste 2: Login
    console.log('\nüìã Teste 2: Processo de login');
    await page.goto(BASE_URL);
    await page.waitForSelector('input[type="email"]', { timeout: 10000 });
    
    await page.fill('input[type="email"]', TEST_EMAIL);
    await page.fill('input[type="password"]', TEST_PASSWORD);
    await page.click('button[type="submit"]');
    
    // Aguardar redirecionamento ap√≥s login
    await page.waitForTimeout(3000);
    
    const loggedInUrl = page.url();
    if (loggedInUrl.includes('/dashboard')) {
      console.log('‚úÖ SUCESSO: Login realizado e redirecionamento para dashboard');
    } else {
      console.log('‚ùå FALHA: Login n√£o funcionou ou n√£o redirecionou para dashboard');
      console.log('URL atual:', loggedInUrl);
    }
    
    // Teste 3: Carregamento do Dashboard
    console.log('\nüìã Teste 3: Carregamento do Dashboard');
    
    // Verificar se elementos principais est√£o presentes
    const dashboardTitle = await page.textContent('h1').catch(() => null);
    if (dashboardTitle && dashboardTitle.includes('Candidatos')) {
      console.log('‚úÖ SUCESSO: T√≠tulo do dashboard carregado');
    } else {
      console.log('‚ùå FALHA: T√≠tulo do dashboard n√£o encontrado');
    }
    
    // Verificar se bot√£o de atualizar est√° presente
    const refreshButton = await page.locator('button:has-text("Atualizar")').isVisible();
    if (refreshButton) {
      console.log('‚úÖ SUCESSO: Bot√£o de atualizar encontrado');
    } else {
      console.log('‚ùå FALHA: Bot√£o de atualizar n√£o encontrado');
    }
    
    // Teste 4: Carregamento de dados
    console.log('\nüìã Teste 4: Carregamento de dados');
    
    // Clicar no bot√£o atualizar para carregar dados
    await page.click('button:has-text("Atualizar")');
    
    // Aguardar carregamento (verificar se loading spinner aparece)
    await page.waitForTimeout(2000);
    
    // Verificar se estat√≠sticas est√£o sendo exibidas
    const statsCards = await page.locator('[class*="ModernStatCard"]').count();
    if (statsCards > 0) {
      console.log(`‚úÖ SUCESSO: ${statsCards} cart√µes de estat√≠sticas encontrados`);
    } else {
      console.log('‚ùå FALHA: Cart√µes de estat√≠sticas n√£o encontrados');
    }
    
    // Verificar se h√° dados de candidatos ou mensagem de "nenhum resultado"
    const noDataMessage = await page.locator('text=Nenhum resultado encontrado').isVisible().catch(() => false);
    const candidateCards = await page.locator('[class*="ModernCard"]').count();
    
    if (candidateCards > 0) {
      console.log(`‚úÖ SUCESSO: ${candidateCards} candidatos carregados`);
    } else if (noDataMessage) {
      console.log('‚ö†Ô∏è AVISO: Nenhum candidato encontrado (pode ser normal se n√£o h√° dados)');
    } else {
      console.log('‚ùå FALHA: N√£o foi poss√≠vel determinar se h√° dados ou n√£o');
    }
    
    // Teste 5: Funcionalidade de busca
    console.log('\nüìã Teste 5: Funcionalidade de busca');
    
    const searchInput = await page.locator('input[placeholder*="Buscar"]').isVisible();
    if (searchInput) {
      console.log('‚úÖ SUCESSO: Campo de busca encontrado');
      
      // Testar busca
      await page.fill('input[placeholder*="Buscar"]', 'teste');
      await page.waitForTimeout(1000);
      console.log('‚úÖ SUCESSO: Campo de busca funcional');
    } else {
      console.log('‚ùå FALHA: Campo de busca n√£o encontrado');
    }
    
    // Teste 6: Filtros avan√ßados
    console.log('\nüìã Teste 6: Filtros avan√ßados');
    
    const advancedFilters = await page.locator('text=Filtros Avan√ßados').isVisible().catch(() => false);
    if (advancedFilters) {
      console.log('‚úÖ SUCESSO: Filtros avan√ßados encontrados');
    } else {
      console.log('‚ö†Ô∏è AVISO: Filtros avan√ßados n√£o encontrados (pode estar em componente separado)');
    }
    
    // Teste 7: Bot√µes de visualiza√ß√£o
    console.log('\nüìã Teste 7: Bot√µes de visualiza√ß√£o');
    
    const viewButtons = await page.locator('button:has-text("Cart√µes"), button:has-text("Tabela")').count();
    if (viewButtons > 0) {
      console.log(`‚úÖ SUCESSO: ${viewButtons} bot√µes de visualiza√ß√£o encontrados`);
    } else {
      console.log('‚ùå FALHA: Bot√µes de visualiza√ß√£o n√£o encontrados');
    }
    
    // Teste 8: Bot√£o de exporta√ß√£o
    console.log('\nüìã Teste 8: Bot√£o de exporta√ß√£o');
    
    const exportButton = await page.locator('button:has-text("Exportar")').isVisible();
    if (exportButton) {
      console.log('‚úÖ SUCESSO: Bot√£o de exporta√ß√£o encontrado');
    } else {
      console.log('‚ùå FALHA: Bot√£o de exporta√ß√£o n√£o encontrado');
    }
    
    // Teste 9: Performance
    console.log('\nüìã Teste 9: Performance');
    
    const startTime = Date.now();
    await page.reload();
    await page.waitForLoadState('networkidle');
    const loadTime = Date.now() - startTime;
    
    console.log(`‚è±Ô∏è Tempo de carregamento: ${loadTime}ms`);
    if (loadTime < 3000) {
      console.log('‚úÖ SUCESSO: Carregamento r√°pido (< 3s)');
    } else {
      console.log('‚ö†Ô∏è AVISO: Carregamento lento (> 3s)');
    }
    
    // Teste 10: Responsividade
    console.log('\nüìã Teste 10: Responsividade');
    
    // Testar em resolu√ß√£o mobile
    await page.setViewportSize({ width: 375, height: 667 });
    await page.waitForTimeout(1000);
    
    const mobileLayout = await page.locator('h1').isVisible();
    if (mobileLayout) {
      console.log('‚úÖ SUCESSO: Layout responsivo em mobile');
    } else {
      console.log('‚ùå FALHA: Layout n√£o responsivo em mobile');
    }
    
    // Voltar para desktop
    await page.setViewportSize({ width: 1920, height: 1080 });
    
    console.log('\nüéâ Testes conclu√≠dos!');
    
  } catch (error) {
    console.error('‚ùå ERRO durante os testes:', error.message);
  } finally {
    await browser.close();
  }
}

// Executar testes
testDashboard().catch(console.error);
